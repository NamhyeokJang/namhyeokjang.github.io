{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","link":"/2021/12/08/hello-world/"},{"title":"MySQL8.0에서 Spatial Data 사용기","text":"사용자의 위치정보를 이용한 서비스 개발을 진행하면서 geometry 타입의 데이터를 사용하게 되었습니다.서버는 nodejs로 개발을 진행했으며 개발 스택은 다음과 같습니다. MySQL 8.0 Express GraphQL TypeORM (0.2.37) 해당 내용에서 줌점적으로 다룰 기술은 TypeORM, MySQL 입니다.Spatial Data에 대한 내용은 쉽게 찾을 수 있으므로 해당 내용은 다루지 않겠습니다. 예시 코드 좀더 설명을 쉽게 하기 위해 예시를 통해 설명하겠습니다아래는 TypeORM을 이용하여 작성한 코드입니다. @Entity()@Index('PLACE_LOCATION_INDEX', ['location'], { spatial: true, unique: false })export class Place extends CommonEntity { @Field(() =&gt; GraphQLInt) @PrimaryGeneratedColumn({ type: 'int', comment: 'pk' }) readonly pId!: number @Column({ type: 'varchar', nullable: false }) name!: string @Column({ type: 'geometry', srid: 4326, spatialFeatureType: 'point', nullable: false }) location!: string} 테스트를 위한 위치기반 쿼리는 아래와 같습니다.37.43659156895352, 126.68398121241327 해당 좌표 반경 10km 이내 포인트 검색하는 쿼리입니다. SELECT *, ST_AsText(location) as locationInTextFROM placeWHERE MBRContains(ST_GeometryFromText(ST_AsText(ST_Envelope(linestring(point((37.43659156895352+(13/111)), (126.68398121241327+(13/111))), point((37.43659156895352-(13/111)), (126.68398121241327-(13/111)))))), 4326), location); 테스트 데이터는 10,000개로 진행합니다. Spatial Index 를 이용한 위치쿼리 최적화TypeORM에서 생성된 테이블에서 테스트TypeORM에서 자동으로 수행된 테이블에서 예시 쿼리를 수행한 결과입니다. 쿼리 수행하는데 약 1초 이상 (1161 ms) 소요되는 것을 확인할 수 있습니다.쿼리가 이정도로 느리면 서비스에서 사용하기 어렵다고 생각합니다. explain을 이용하여 쿼리수행계획을 확인해보면 type이 ALL 인 것으로 보아 풀스캔이 발생되는 것을 확인할 수 있습니다. 여기서 짚고 가야하는 것은 분명 TypeORM에서 Entity를 정의할 때 Spatial Index를 설정해주었습니다. @Index('PLACE_LOCATION_INDEX', ['location'], { spatial: true, unique: false }) MySQL에서 SHOW INDEX FROM place; 쿼리를 이용하여 확인해봅니다. TypeORM이 제대로 Spatial Index를 생성한 것을 확인할 수 있습니다.하지만 쿼리수행계획을 확인했을때 Index를 사용하지 못하고 있는 것으로 확인할 수 있습니다. 위치기반 쿼리 최적화MySQL 공식문서 - spatial type overview Spatial columns with no SRID attribute are not SRID-restricted and accept values with any SRID. However, the optimizer cannot use SPATIAL indexes on them until the column definition is modified to include an SRID attribute, which may require that the column contents first be modified so that all values have the same SRID. 공식문서에 따르면 SRID 제약이 있어야 Index를 사용할 수 있다고 합니다.위 내용에 따르면 현재 테이블에 SRID 제약이 없는 것으로 추측됩니다.SRID를 0으로 데이터를 추가해봅니다. INSERT INTO place (createdAt, updatedAt, name, location) VALUE (now(), now(), 'aa', ST_GeometryFromText('POINT(37.43659156895352 126.68398121241327)', 0)); 위 INSERT 쿼리가 수행되는 것을 확인할 수 있습니다. 이 실험으로 TypeORM이 생성해준 테이블에는 srid를 설정했음에도 불구하고 srid 제약은 설정하지 않는 것으로 확인할 수 있습니다. 방금 추가했던 데이터를 삭제하고 아래 쿼리를 이용하여 테이블의 location 컬럼에 SRID 제약을 설정해줍니다. ALTER TABLE place MODIFY location Geometry NOT NULL SRID 4326; [HY000][3644] The SRID specification on the column ‘location’ cannot be changed because there is a spatial index on the column. Please remove the spatial index before altering the SRID specification. Index가 존재하여 속성을 변경할 수 없다고 합니다.Index를 삭제하고 다시 수행해봅니다. DROP INDEX `PLACE_LOCATION_INDEX` on place; SRID 0 인 데이터를 다시 추가시도해봅니다. [HY000][3643] The SRID of the geometry does not match the SRID of the column ‘location’. The SRID of the geometry is 0, but the SRID of the column is 4326. Consider changing the SRID of the geometry or the SRID property of the column. SRID가 0인 데이터를 넣을 수 없다고 MySQL에서 에러가 발생됩니다. SRID 제약이 제대로 설정된 것을 확인할 수 있습니다. 이전에 삭제했던 Spatial Index를 다시 생성해줍니다. CREATE SPATIAL INDEX `PLACE_LOCATION_INDEX` on place(location); 위치기반 쿼리를 수행해봅니다. 쿼리 수행속도가 1초에서 50ms 수준으로 최적화가 되었습니다.explain으로 쿼리 수행 계획을 확인해봅니다. 결론TypeORM에 의해 생성된 위치데이터 컬럼은 SRID 제약이 없기 때문에 Spatial Index가 생성되어도 사용하지 못합니다.이를 위해서 직접 SRID 제약을 설정하고 Spatial Index를 새로 생성해주어야 합니다.","link":"/2021/12/25/spatial-index/"},{"title":"test","text":"블로그..?","link":"/2024/02/22/test/"},{"title":"[Typescript] Init","text":"Hello Typescript!! This is Test Post","link":"/2021/12/21/typescript/"}],"tags":[{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"database","slug":"database","link":"/tags/database/"},{"name":"etc","slug":"etc","link":"/tags/etc/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"}],"categories":[{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"},{"name":"etc","slug":"etc","link":"/categories/etc/"},{"name":"typescript","slug":"typescript","link":"/categories/typescript/"}]}